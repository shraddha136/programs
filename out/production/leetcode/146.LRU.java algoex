import java.util.HashMap;

class Test {
    public static void main(String[] args) {
        LRUCache cache = new LRUCache(2);
        System.out.println(cache.getValueFromKey("a").value);
        cache.insertKeyValuePair("a", 99);
        cache.insertKeyValuePair("b", 100);
        System.out.println(cache.getMostRecentKey());

        System.out.println(cache.getValueFromKey("a").value);
        System.out.println(cache.getMostRecentKey());
        cache.insertKeyValuePair("c", 200);

    }
}

class LRUCache {
    int maxSize;

    HashMap<String, doublyLinkedList.Node> map;
    int cacheSize;
    doublyLinkedList dll;

    public LRUCache(int maxSize) {
        this.maxSize = maxSize > 1 ? maxSize : 1;
        map = new HashMap<>();
        cacheSize = 0;
        dll = new doublyLinkedList();
    }

    public void insertKeyValuePair(String key, int value) {
        // Write your code here.
        doublyLinkedList.Node node = new doublyLinkedList.Node(key, value);
        if (!map.containsKey(key)) {
            if (cacheSize == maxSize) {
                evictLeastRecent();
            } else {
                cacheSize++;
            }
            map.put(key, node);
        } else {
            map.get(key).value = value;
        }
        updateMostRecent(map.get(key));

    }

    private void updateMostRecent(doublyLinkedList.Node node) {
        dll.setHead(node);
    }

    private void evictLeastRecent() {
        String removed = dll.tail.key;
        dll.removeTail();
        map.remove(removed);
    }

    public LRUResult getValueFromKey(String key) {
        // Write your code here.
        if (map.containsKey(key)) {
            updateMostRecent(map.get(key));
            return new LRUResult(true, map.get(key).value);
        }
        return new LRUResult(false, -1);
    }

    public String getMostRecentKey() {
        // Write your code here.
        return dll.head.key;
    }
    static class doublyLinkedList {
         static class Node {
            Node next;
            Node prev;
            int value;
            String key;

            public Node(String key, int val) {
                this.value = val;
                this.key = key;
                next = prev = null;
            }
        }

        public Node head;
        public Node tail;

        public void setHead(Node node) {
            if (head == null)
                head = tail = node;
            else
                insertBefore(head, node);
        }

        public void setTail(Node node) {
            if (tail == null)
                setHead(node);
            else
                insertAfter(tail, node);
        }

        public void insertBefore(Node node, Node nodeToInsert) {
            if (nodeToInsert == head && nodeToInsert == tail)
                return;
            remove(nodeToInsert);
            nodeToInsert.prev = node.prev;
            nodeToInsert.next = node;
            if (node.prev == null)
                head = nodeToInsert;
            else
                node.prev.next = nodeToInsert;
            node.prev = nodeToInsert;
        }

        public void insertAfter(Node node, Node nodeToInsert) {
            if (nodeToInsert == head && nodeToInsert == tail) {
                return;
            }
            remove(nodeToInsert);
            nodeToInsert.prev = node;
            nodeToInsert.next = node.next;
            if (node.next == null)
                tail = nodeToInsert;
            else {
                node.next.prev = nodeToInsert;
            }
            node.next = nodeToInsert;
        }

        public void insertAtPosition(int pos, Node nodeToInsert) {
            if (pos == 1) {
                setHead(nodeToInsert);
                return;
            } else {
                int i = 1;
                Node curr = head;
                while (curr != null && i != pos) {
                    curr = curr.next;
                    i++;
                }
                if (curr == null)
                    setTail(nodeToInsert);
                else
                    insertBefore(nodeToInsert, curr);
            }
        }

        public boolean containsNodeWithValue(int value) {
            Node curr = head;
            while (curr != null) {
                if (curr.value == value)
                    return true;
                curr = curr.next;
            }
            return false;
        }

        public void remove(Node nodeToRemove) {

            if (nodeToRemove == head) {
                head = head.next;
            }
            if (nodeToRemove == tail) {
                tail = tail.prev;
            }
            //update node's prev's and next's pointers
            removeNodeBindings(nodeToRemove);
        }

        private void removeNodeBindings(Node node) {
            if (node.prev != null)
                node.prev.next = node.next;
            if (node.next != null)
                node.next.prev = node.prev;
            node.prev = null;
            node.next = null;
        }

        public void removeTail() {
            if (tail == null)
                return;
            if (tail == head) {
                head = tail = null;
                return;
            } else {
                tail = tail.prev;
                tail.next = null;
            }
        }

        public void removeNodesWithValue(int value) {
            Node curr = head;
            while (curr != null) {
                Node next = curr.next;
                if (curr.value == value) {
                    remove(curr);
                }
                curr = next;
            }
        }

    }
    static class LRUResult {
        boolean found;
        int value;

        public LRUResult(boolean found, int value) {
            this.found = found;
            this.value = value;
        }
    }
}









